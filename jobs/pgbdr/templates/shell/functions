#!/usr/bin/env bash

fail() { 
  echo "$*" >&2 
  exit 1
}

user() {
  local _action=$1 ; shift
  case ${_action} in
    (exec)  exec chpst -u "${userName}:${groupName}" "$@" ;;
    (run)   chpst -u "${userName}:${groupName}" "$@"      ;;
    (chown) chown -R "${userName}:${groupName}" "$@"      ;;
  esac
}

send_signal() { 
  if [[ -s ${pidFile} ]]
  then
    pid=$(head -1 ${pidFile})
    if (( ${pid:-0} > 0 ))
    then kill -${1} ${pid}
    fi
  fi
}

turn_debugging_on() {
  echo "Turning Debugging On"
  export PS4='+(${BASH_SOURCE}:${LINENO})> ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  export DEBUG="true" 
  set -x
  set -v
}

add_packages_to_path() { # Add all packages' /bin & /sbin into $PATH
  for _path in $(ls -d /var/vcap/packages/*/*bin)
  do PATH="${_path}:${PATH}"
  done ; export PATH
}

configure_job_paths() {
  _paths=(
    "${jobPath}"
    "${runPath}"
    "${logPath}"
    "${tmpPath}"
    "${storePath}"
  )

  for _path in "${_paths[@]}"
  do
    if ! [[ -d ${_path} ]]
    then
      mkdir -p "${_path}"
      chown -R ${userName}:${groupName} "${_path}"
      chmod 0775 "${_path}"
    fi
  done
}

graceful_stop() {
  user run ${binary} stop ${binaryArgs[@]} -m fast
  rm -f ${pidFile}
  exit 0 # Normal exit, return code 0
}

initialize_database() {
  if [[ ! -d ${dataPath} ]]
  then 
    chown -R ${userName}:${groupName} ${storePath}
    pushd ${storePath}
    HOME=${storePath} chpst -u ${userName}:${groupName} ${pkgPath}/bin/initdb \
      -E UTF8 --local "en_US.UTF-8" -D ${dataPath}
    popd
  fi
}

configure_pgbdr() {
  sed -i ${dataPath}/postgresql.conf \
    -e "s/^.*shared_preload_libraries.*\$/shared_preload_libraries = 'bdr'/" \
    -e "s/^.*wal_level.*\$/wal_level = 'logical'/" \
    -e "s/^.*track_commit_timestamp.*\$/track_commit_timestamp = on/" \
    -e "s/^.*bdr.log_conflicts_to_table.*\$/bdr.log_conflicts_to_table=on/" \
    -e "s/^.*bdr.default_apply_delay.*\$/bdr.default_apply_delay=${pgbdrDefaultApplyDelay}   # milliseconds/" \
    -e "s/^.*listen_addresses.*\$/listen_addresses = '*'/" \
    -e "s%^.*external_pid_file.*\$%external_pid_file = '${pidFile}'%" \
    -e "s/^.*port\$/port = '${pgPort}'/" \
    -e "s/^.*max_wal_senders.*\$/max_wal_senders = ${pgbdrMaxWalSenders}/" \
    -e "s/^.*max_replication_slots.*\$/max_replication_slots = ${pgbdrMaxReplicationSlots}/" \
    -e "s/^.*max_worker_processes.*\$/max_worker_processes = ${pgbdrMaxWorkerProcesses}/" \
    -e "s/^.*log_error_verbosity.*\$/log_error_verbosity = ${pgbdrLogErrorVerbosity}/" \
    -e "s/^.*log_line_prefix.*\$/log_line_prefix = '${pgbdrLogLinePrefix}'/" \
    -e "s/^.*log_min_messages.*\$/log_min_messages = ${pgbdrLogMinMessages}/" \
    -e "s/^.*log_min_error_statement*\$/log_min_error_statement = ${pgbdrLogMinErrorStatement}/" \
    -e "s/^.*log_min_duration_statement*\$/log_min_duration_statement = ${pgbdrLogMinDurationStatement}/" \
    -e "s/^.*max_connections*\$/max_connections = ${pgbdrMaxConnections}/" \
    -e "s/^.*shared_buffers*\$/shared_buffers = ${pgbdrSharedBuffers}/" \
    -e "s/^.*effective_cache_size*\$/effective_cache_size = ${pgbdrEffectiveCacheSize}/" \
    -e "s/^.*work_mem*\$/work_mem = ${pgbdrWorkMem}/" \
    -e "s/^.*maintenance_work_mem*\$/maintenance_work_mem = ${pgbdrMaintenanceWorkMem}/" \
    -e "s/^.*checkpoint_segments*\$/checkpoint_segments = ${pgbdrCheckpointSegments}/" \
    -e "s/^.*checkpoint_completion_target*\$/checkpoint_completion_target = ${pgbdrCheckpointSegments}/" \
    -e "s/^.*wal_buffers*\$/wal_buffers = ${pgbdrWALBuffers}/" \
    -e "s/^.*default_statistics_target*\$/default_statistics_target = ${pgbdrDefaultStatisticsTarget}/"

  cat > ${dataPath}/pg_hba.conf <<EOF
# TYPE  DATABASE      USER        ADDRESS       METHOD
local   replication   vcap                      trust
host    replication   postgres    127.0.0.1/32  trust
host    replication   postgres    ::1/128       trust
local   all           postgres                  trust
host    all           postgres    127.0.0.1/32  trust
host    all           postgres    ::1/128       trust
local   all           vcap                      trust
host    all           all        127.0.0.1/32  md5
host    all           all        ::1/128       md5
EOF

  for node in ${nodes[@]}
  do
    {
      echo "host    replication   ${rdpgUser} ${node}/32  trust"
      echo "host    all           ${rdpgUser} ${node}/32  trust"
    } >> ${dataPath}/pg_hba.conf 
  done

  if [[ -n ${pgbdrHBA} ]]
  then echo "${pgbdrHBA}" >> ${dataPath}/pg_hba.conf 
  fi
  chown ${userName}:${groupName} ${dataPath}/*.conf
  chmod 0644 ${dataPath}/*.conf
}

