<%
  require 'json'

  my_ip = spec.networks.send(spec.networks.methods(false).first).ip
  my_host = spec.networks.send(spec.networks.methods(false).first).dns_record_name
  join_hosts = p('consul.cluster.join_hosts', nil)
  join_host = p('consul.cluster.join_host', nil)
  cluster_size = p('consul.cluster.size', nil)
  is_inital_leader = join_host && (join_host == my_host || join_host == my_ip)
  client_addr = p('consul.client_addr', '0.0.0.0')

  config = {
    server: true,
    data_dir: '/var/vcap/store/consul',
    ui_dir: '/var/vcap/packages/consul-ui',
    node_name: "#{spec.deployment}-#{name}-#{index}",
    bind_addr: '0.0.0.0',
    client_addr: client_addr,
    advertise_addr: my_ip,
    domain: 'consul',
    leave_on_terminate: false,
    log_level: 'INFO',
    domain: p('consul.domain', 'consul'),
    server: p('consul.server', true),
    datacenter: p('consul.datacenter', true),
    rejoin_after_leave: true,
    ports: {
      dns: 53
    }
  }
	(name == "manager" && index == 0)  ?  config["bootstrap"] = true : config["bootstrap"] = false
	config["tart_join"] = p('consul.join_node') if (name != "manager" || index > 0) 

  ssl_ca = p("consul.ssl_ca", nil)
  ssl_cert = p("consul.ssl_crt", nil)
  ssl_key = p("consul.ssl_key", nil)
  if ssl_ca and ssl_cert and ssl_key
    config[:verify_incoming] = true
    config[:verify_outgoing] = true
    config[:ca_file] = '/var/vcap/jobs/consul/config/ca.crt'
    config[:cert_file] = '/var/vcap/jobs/consul/config/consul.crt'
    config[:key_file] = '/var/vcap/jobs/consul/config/consul.key'
  end

  if p('consul.encrypt', nil)
    config[:encrypt] = p('consul.encrypt')
  end

  if (networks = spec.networks.methods(false)) && dns = spec.networks.send(networks.first).dns
    config[:recursor] = dns.first
  else
    config[:recursor] = '8.8.8.8'
  end

  if join_hosts
    config[:start_join] = join_hosts
    config[:retry_join] = join_hosts
    config[:bootstrap_expect] = cluster_size
  elsif join_host and cluster_size
    config[:start_join] = [join_host] unless is_inital_leader
    config[:retry_join] = [join_host] unless is_inital_leader
    config[:bootstrap_expect] = cluster_size
  end
%>
<%= JSON.pretty_generate(config) %>

