#!/var/vcap/packages/bash-4.3/bin/bash

fail() { 
  echo "$*" >&2 
  exit 1 
}

user() {
  local _action=$1 ; shift
  case ${_action} in
    (exec)  exec chpst -u "${userName}:${groupName}" "$@" ;;
    (run)   chpst -u "${userName}:${groupName}" "$@"      ;;
    (chown) chown -R "${userName}:${groupName}" "$@"      ;;
  esac
}

set_pid() {
  pid=0
  if [[ -s ${pidFile} ]]
  then pid=$(head -1 ${pidFile})
  fi
}

send_signal() { 
  if (( ${pid:-0} > 0 ))
  then kill -${1} ${pid}
  fi
}

turn_debugging_on() {
  echo "Turning Debugging On"
  export PS4='+(${BASH_SOURCE}:${LINENO})> ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  export DEBUG="true" 
  set -x
}

add_packages_to_path() { # Add all packages' /bin & /sbin into $PATH
  for _path in $(ls -d /var/vcap/packages/*/*bin)
  do PATH="${_path}:${PATH}"
  done ; export PATH
}

configure_job_paths() {
  paths=(
    "${jobPath}"
    "${runPath}"
    "${logPath}"
    "${tmpPath}"
    "${storePath}"
  )
  if (( ${UID} == 0 ))
  then
    for _path in "${paths[@]}"
    do
      [[ -d ${_path} ]] || mkdir -p "${_path}"
      chown -R ${userName}:${groupName} "${_path}"
      chmod 0775 "${_path}"
    done
  fi
}

register_write_master() {
  if [[ $(curl -s http://127.0.0.1:${consulPort}/v1/health/service/master) == "[]" ]]
  then # TODO: This isn't quite right being here, move to an 'rdpg' job.
    curl -s -X PUT http://${nodes[0]}:${consulPort}/v1/agent/service/register \
      -d '{ "ID": "pgbdrc", "Name": "master", "Address": "'${nodes[0]}'", "Port": '${hapWritePort}', "Check": { "script": "'${jobPath}'/bin/check ha_pb_pg", "Interval": "10s"}} '
  fi
}

psqlc() {
  local _db=${1}  ; shift
  if ! psql --port ${pgPort} -U ${rdpgUser} ${_db} -c "${*}"
  then echo "psqlc: ERROR: $*"
  fi
}

join_node_ready() {
  if psql --host="${nodes[${1}]}" --port ${pgPort} ${rdpgDB} -U ${rdpgUser} -c "SELECT true;" &>/dev/null
  then return 0
  else return $?
  fi
}

number_of_joined_nodes() {
  count=$(psql --host="${nodes[0]}" --port ${pgPort} -U postgres ${rdpgDB} -t -c 'SELECT count(node_name) FROM bdr.bdr_nodes;' 2>/dev/null)
  echo ${count:-0}
}

initialize_rdpg_db() {
  while ! psql --port ${pgPort} -U vcap postgres -c "SELECT true;" &>/dev/null
  do sleep 1
  done

  if [[ -z $(psql --port ${pgPort} -U vcap postgres -t -c "SELECT rolname FROM pg_roles WHERE rolname='${rdpgUser}';" 2>/dev/null) ]]
  then # Create the rdpg User
    psql --port ${pgPort} -U vcap postgres \
      -c "CREATE USER ${rdpgUser} WITH SUPERUSER CREATEDB CREATEROLE INHERIT;" || true

    psql --port ${pgPort} -U vcap postgres \
      -c "ALTER USER ${rdpgUser} ENCRYPTED PASSWORD '${rdpgPass}';" || true
  fi

  if [[ -z $(psql --port ${pgPort} -U vcap postgres -t -c "SELECT datname FROM pg_database WHERE datname='${rdpgDB}';" 2>/dev/null) ]]
  then  # Create the rdpg Database and Extensions
    createdb --port ${pgPort} -U vcap -O ${rdpgUser} -T template0 ${rdpgDB} || true
    # TODO: Move the extension creation into the rdpgd, only assume DB created.
    psqlc ${rdpgDB} "CREATE EXTENSION IF NOT EXISTS btree_gist;" || true
    psqlc ${rdpgDB} "CREATE EXTENSION IF NOT EXISTS bdr;" || true
  fi

  # TODO: Move all of this into the rdpgd.
  if (( ${vmIndex} == 0 ))
  then # First Node
    sql="SELECT bdr.bdr_group_create( 
    local_node_name := '${vmName}${vmIndex}',
    node_external_dsn := 'host=${nodes[0]} port=${pgPort} user=${rdpgUser} dbname=${rdpgDB}'
    ); 
    "
  else # Subsequent Nodes
    sql="SELECT bdr.bdr_group_join( 
    local_node_name := '${vmName}${vmIndex}',
    node_external_dsn := 'host=${nodes[${vmIndex}]} port=${pgPort} user=${rdpgUser} dbname=${rdpgDB}',
    join_using_dsn := 'host=${nodes[0]} port=${pgPort} user=${rdpgUser} dbname=${rdpgDB}'
    ); 
    "

    while ! join_node_ready 0
    do sleep 1
    done
  fi

  while (( $(number_of_joined_nodes) < ${vmIndex} ))
  do sleep 1
  done

  if (( $(number_of_joined_nodes) == ${vmIndex} ))
  then
    echo "${sql}" > ${logPath}/sql.sql
    psqlc ${rdpgDB} "${sql}"
    psqlc ${rdpgDB} "SELECT bdr.bdr_node_join_wait_for_ready();"
  fi
}

